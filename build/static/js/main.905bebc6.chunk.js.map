{"version":3,"sources":["ProductList.js","AddProduct.js","App.js","serviceWorker.js","index.js"],"names":["ProductList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","products","_this2","fetch","then","res","json","result","setState","id","apiUrl","concat","myHeaders","Headers","append","options","method","body","JSON","stringify","window","location","reload","_this3","_this$state","react_default","a","createElement","message","className","map","product","key","title","onClick","editProduct","deleteProduct","Component","AddProduct","initialState","handleChange","bind","assertThisInitialized","handleSubmit","e","target","value","onFormSubmit","onSubmit","type","name","onChange","React","App","isAddProduct","isEditProduct","data","response","productForm","src_AddProduct_0","iseditProduct","src_ProductList_0","onCreate","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAmFeA,qBA/Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,KACPC,SAAU,IAJKT,mFASC,IAAAU,EAAAP,KAGlBQ,MAFY,+BAGTC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAAAG,GACEL,EAAKM,SAAS,CAAEP,SAAUM,KAE5B,SAAAP,GACEE,EAAKM,SAAS,CAAER,kDAIVS,GACZ,IAAMC,EAAM,+BAAAC,OAAkCF,GACxCG,EAAY,IAAIC,QACtBD,EAAUE,OAAO,eAAgB,oBAEjC,IAAMC,EAAU,CACdC,OAAQ,SACRC,KAAMC,KAAKC,UAAUV,GACrBG,aAGFT,MAAMO,EAAQK,GACdK,OAAOC,SAASC,0CAGT,IAAAC,EAAA5B,KAAA6B,EACqB7B,KAAKI,MAAzBC,EADDwB,EACCxB,MAAOC,EADRuB,EACQvB,SAEf,OAAID,EACKyB,EAAAC,EAAAC,cAAA,sBAAc3B,EAAM4B,QAApB,KAGLH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAOE,UAAU,SACfJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,uBAGJF,EAAAC,EAAAC,cAAA,aACG1B,EAAS6B,IAAI,SAAAC,GAAO,OACnBN,EAAAC,EAAAC,cAAA,MAAIK,IAAKD,EAAQtB,IACfgB,EAAAC,EAAAC,cAAA,UAAKI,EAAQtB,IACbgB,EAAAC,EAAAC,cAAA,UAAKI,EAAQE,OACbR,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAQO,QAAS,kBAAMX,EAAKhC,MAAM4C,YAAYJ,EAAQtB,MAAtD,QADF,OAKEgB,EAAAC,EAAAC,cAAA,UAAQO,QAAS,kBAAMX,EAAKa,cAAcL,EAAQtB,MAAlD,wBAlEM4B,cCmDXC,qBAlDb,SAAAA,EAAY/C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2C,IACjB9C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6C,GAAAxC,KAAAH,KAAMJ,KACDgD,aAAe,CAClBN,MAAO,IAGL1C,EAAMwC,QACRvC,EAAKO,MAAQR,EAAMwC,QAEnBvC,EAAKO,MAAQP,EAAK+C,aAGpB/C,EAAKgD,aAAehD,EAAKgD,aAAaC,KAAlBhD,OAAAiD,EAAA,EAAAjD,CAAAD,IACpBA,EAAKmD,aAAenD,EAAKmD,aAAaF,KAAlBhD,OAAAiD,EAAA,EAAAjD,CAAAD,IAbHA,4EAgBNoD,GACXjD,KAAKa,SAAS,CAAEyB,MAAOW,EAAEC,OAAOC,6CAGrBF,GAEXjD,KAAKJ,MAAMwD,aAAapD,KAAKI,OAE7BJ,KAAKa,SAASb,KAAK4C,+CAInB,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,QAAMqB,SAAUrD,KAAKgD,cACnBlB,EAAAC,EAAAC,cAAA,mCAEEF,EAAAC,EAAAC,cAAA,SACEE,UAAU,aACVoB,KAAK,OACLC,KAAK,QACLJ,MAAOnD,KAAKI,MAAM+C,MAClBK,SAAUxD,KAAK6C,gBAInBf,EAAAC,EAAAC,cAAA,UAAQsB,KAAK,UAAb,mBA5CeG,IAAMf,YCiGhBgB,qBA9Fb,SAAAA,EAAY9D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0D,IACjB7D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4D,GAAAvD,KAAAH,KAAMJ,KACDQ,MAAQ,CACXuD,cAAc,EACdC,eAAe,EACfvD,MAAO,KACP+B,QAAS,IAEXvC,EAAKuD,aAAevD,EAAKuD,aAAaN,KAAlBhD,OAAAiD,EAAA,EAAAjD,CAAAD,IARHA,0EAYjBG,KAAKa,SAAS,CAAE8C,cAAc,yCAGnBE,GAAM,IACb9C,EADaR,EAAAP,KAIfe,EADEf,KAAKI,MAAMwD,cACP,+BAAA5C,OAAkC6C,GAE/B,8BAEX,IAAM5C,EAAY,IAAIC,QACtBD,EAAUE,OAAO,eAAgB,oBAEjC,IAAMC,EAAU,CACdC,OAAQ,OACRC,KAAMC,KAAKC,UAAUqC,GACrB5C,aAGFT,MAAMO,EAAQK,GACXX,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACC,SAAAG,GACEL,EAAKM,SAAS,CACZiD,SAAUlD,EACV+C,cAAc,EACdC,eAAe,KAGnB,SAAAvD,GACEE,EAAKM,SAAS,CAAER,gDAKZS,GACV,IAAMC,EAAM,+BAAAC,OAAkCF,IAC5B,IAAII,SACZC,OAAO,eAAgB,oBAEjC,IAAMC,EAAU,CACdC,OAAQ,MACRC,KAAMC,KAAKC,UAAUV,IAGvBN,MAAMO,EAAQK,GACdK,OAAOC,SAASC,0CAGT,IACHoC,EADGnC,EAAA5B,KAYP,OATIA,KAAKI,MAAMuD,cAAgB3D,KAAKI,MAAMwD,iBACxCG,EACEjC,EAAAC,EAAAC,cAACgC,EAAD,CACEZ,aAAcpD,KAAKoD,aACnBhB,QAASpC,KAAKI,MAAMgC,WAMxBN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UAAf,mBAEElC,KAAKI,MAAMuD,eAAiB3D,KAAKI,MAAM6D,eACvCnC,EAAAC,EAAAC,cAACkC,EAAD,CAAa1B,YAAaxC,KAAKwC,eAG/BxC,KAAKI,MAAMuD,cACX7B,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAAUK,QAAS,kBAAMX,EAAKuC,aAAhD,eAKDJ,UAzFSrB,cCOE0B,QACW,cAA7B3C,OAAOC,SAAS2C,UAEe,UAA7B5C,OAAOC,SAAS2C,UAEhB5C,OAAOC,SAAS2C,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrE,KAAK,SAAAsE,GACjCA,EAAaC","file":"static/js/main.905bebc6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./ProductList.css\";\r\n\r\nclass ProductList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      products: []\r\n    };\r\n  }\r\n\r\n  //getting list initially..\r\n  componentDidMount() {\r\n    const apiUrl = `http://localhost:8000/posts`;\r\n\r\n    fetch(apiUrl)\r\n      .then(res => res.json())\r\n      .then(\r\n        result => {\r\n          this.setState({ products: result });\r\n        },\r\n        error => {\r\n          this.setState({ error });\r\n        }\r\n      );\r\n  }\r\n  deleteProduct(id) {\r\n    const apiUrl = `http://localhost:8000/posts/${id}`;\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const options = {\r\n      method: \"DELETE\",\r\n      body: JSON.stringify(id),\r\n      myHeaders\r\n    };\r\n\r\n    fetch(apiUrl, options);\r\n    window.location.reload();\r\n  }\r\n\r\n  render() {\r\n    const { error, products } = this.state;\r\n\r\n    if (error) {\r\n      return <div>Error : {error.message} </div>;\r\n    } else {\r\n      return (\r\n        <div>\r\n          <h2>Product List</h2>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>Title</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {products.map(product => (\r\n                <tr key={product.id}>\r\n                  <td>{product.id}</td>\r\n                  <td>{product.title}</td>\r\n                  <td>\r\n                    <button onClick={() => this.props.editProduct(product.id)}>\r\n                      Edit\r\n                    </button>\r\n                    &nbsp;\r\n                    <button onClick={() => this.deleteProduct(product.id)}>\r\n                      Delete\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default ProductList;\r\n","import React from \"react\";\r\nimport \"./AddProduct.css\";\r\n\r\nclass AddProduct extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.initialState = {\r\n      title: \"\"\r\n    };\r\n\r\n    if (props.product) {\r\n      this.state = props.product;\r\n    } else {\r\n      this.state = this.initialState;\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ title: e.target.value });\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    // e.preventDefault();\r\n    this.props.onFormSubmit(this.state);\r\n    // console.log(this.state);\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2> Add/Edit Product</h2>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            Enter Product Name:\r\n            <input\r\n              className=\"search-bar\"\r\n              type=\"text\"\r\n              name=\"title\"\r\n              value={this.state.value}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n\r\n          <button type=\"submit\">SUBMIT</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddProduct;\r\n","import React, { Component } from \"react\";\nimport ProductList from \"./ProductList\";\nimport AddProduct from \"./AddProduct\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isAddProduct: false,\n      isEditProduct: false,\n      error: null,\n      product: {}\n    };\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n  }\n\n  onCreate() {\n    this.setState({ isAddProduct: true });\n  }\n\n  onFormSubmit(data) {\n    let apiUrl;\n\n    if (this.state.isEditProduct) {\n      apiUrl = `http://localhost:8000/posts/${data}`;\n    } else {\n      apiUrl = \"http://localhost:8000/posts\";\n    }\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const options = {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      myHeaders\n    };\n\n    fetch(apiUrl, options)\n      .then(res => res.json())\n      .then(\n        result => {\n          this.setState({\n            response: result,\n            isAddProduct: false,\n            isEditProduct: false\n          });\n        },\n        error => {\n          this.setState({ error });\n        }\n      );\n  }\n\n  editProduct(id) {\n    const apiUrl = `http://localhost:8000/posts/${id}`;\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const options = {\n      method: \"PUT\",\n      body: JSON.stringify(id)\n    };\n\n    fetch(apiUrl, options);\n    window.location.reload();\n  }\n\n  render() {\n    let productForm;\n\n    if (this.state.isAddProduct || this.state.isEditProduct) {\n      productForm = (\n        <AddProduct\n          onFormSubmit={this.onFormSubmit}\n          product={this.state.product}\n        />\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar\">MySQL DATABASE</nav>\n\n        {!this.state.isAddProduct && !this.state.iseditProduct && (\n          <ProductList editProduct={this.editProduct} />\n        )}\n\n        {!this.state.isAddProduct && (\n          <button className=\"btn-add\" onClick={() => this.onCreate()}>\n            Add Product\n          </button>\n        )}\n\n        {productForm}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}